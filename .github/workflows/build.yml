name: "Build Packages"

on:
  workflow_dispatch:

jobs:
  build-manylinux:
    name: Build Library (Manylinux)

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            lib: libindy_credx.so
            container: andrewwhitehead/manylinux2014-base

    container: ${{ matrix.container }}
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Cache cargo resources
        uses: Swatinem/rust-cache@v1

      - name: Build library
        env:
          BUILD_FEATURES: vendored
          BUILD_TARGET: ${{ matrix.target }}
        run: sh ./build.sh

      - name: Upload library artifacts
        uses: actions/upload-artifact@v2
        with:
          name: library-${{ runner.os }}
          path: target/release/${{ matrix.lib }}

  build-other:
    name: Build Library (MacOS/Win)

    strategy:
      matrix:
        include:
          - os: macos-11
            lib: libindy_credx.dylib
            target: apple-darwin
            toolchain: beta # beta required for Darwin build
          - os: windows-latest
            lib: indy_credx.dll
            toolchain: stable

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}

      - name: Cache cargo resources
        uses: Swatinem/rust-cache@v1

      # pre-build so that openssl dependency is cached, otherwise it will complain:
      # "This perl implementation doesn't produce Windows like paths"
      - if: "runner.os == 'Windows'"
        name: Pre-build (Windows)
        uses: actions-rs/cargo@v1
        env:
          OPENSSL_STATIC: 1
        with:
          command: build
          args: --release --manifest-path indy-credx/Cargo.toml --features vendored

      - name: Build library
        env:
          BUILD_FEATURES: vendored
          BUILD_TARGET: ${{ matrix.target }}
          BUILD_TOOLCHAIN: ${{ matrix.toolchain }}
          OPENSSL_STATIC: 1
        run: sh ./build.sh

      - name: Upload library artifacts
        uses: actions/upload-artifact@v2
        with:
          name: library-${{ runner.os }}
          path: target/release/${{ matrix.lib }}
